from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
import sklearn.metrics
import numpy as np
import math
import pandas as pd


class Node:
    """A decision tree node."""
    def __init__(self, gini, entropy, num_samples, 
            num_samples_per_class, predicted_class):
        self.gini = gini
        self.entropy = entropy
        self.num_samples = num_samples
        self.num_samples_per_class = num_samples_per_class
        self.predicted_class = predicted_class
        self.feature_index = 0
        self.threshold = 0
        self.left = None
        self.right = None

class DecisionTreeClassifier:
    def __init__(self,criterion='gini', max_depth=5):
        self.criterion = criterion
        self.max_depth = max_depth

    def _gini(self,sample_y,n_classes):
        # TODO: calculate the gini index of sample_y
        # sample_y represent the label of node
        gini = 0
        each_class = [np.sum(sample_y == i) for i in range(n_classes)]
        
        for i in range(len(each_class)):
            denominator = sample_y.size
            if (denominator != 0) and (each_class[i]!=0):
                gini += pow(each_class[i]/denominator,2)

        gini=1-gini

        return gini
         
    def _entropy(self,sample_y,n_classes):
        # TODO: calculate the entropy of sample_y 
        # sample_y represent the label of node
        entropy = 0

        each_class = [np.sum(sample_y == i) for i in range(n_classes)]
        # print(each_class[0])
        # print(sample_y.size)
        # print(each_class)
        for i in range(len(each_class)):            
            denominator = sample_y.size
            if (denominator != 0) and (each_class[i]!=0) :
                temp_p = each_class[i]/denominator
                entropy -= (temp_p)*(math.log(temp_p))                
        return entropy

    def _feature_split(self, X, y,n_classes):
        # Returns:
        #  best_idx: Index of the feature for best split, or None if no split is found.
        #  best_thr: Threshold to use for the split, or None if no split is found.
        m = y.size
        # print(m)
        if m <= 1:
            return None, None

        # Gini or Entropy of current node.
        if self.criterion == "gini":
            best_criterion = self._gini(y,n_classes)
            best_purity=100
        else:
            best_criterion = self._entropy(y,n_classes)
            # print(best_criterion)
            best_purity=100

        p=[]
        q=[]
        this_gini=0
        this_entropy=0
        best_idx=-1
        best_thr=-1
        
        for idx in range (X.shape[1]): # loop feature
            for thr in range (1,6): # loop thr
                p.clear()
                q.clear()
                for i in range (y.size): # loop all data and split
                    if X[i][idx]>=thr:
                        p.append(y[i])
                    else:
                        q.append(y[i])
                _p=np.array(p)
                _q=np.array(q)
                if self.criterion == "gini":
                    this_gini = self._gini(_p,n_classes) + self._gini(_q,n_classes)-1 # (1-p^2)+(1-q^2)-1 = 1-p^2-q^2
                    if this_gini <= best_purity:
                        best_purity = this_gini
                        best_idx, best_thr = idx , thr
                else:
                    left_weighted = (_p.size/y.size) * self._entropy(_p,n_classes)
                    right_weighted = (_q.size/y.size) * self._entropy(_q,n_classes)
                    this_entropy = left_weighted + right_weighted
                    # print(this_entropy)
                    if this_entropy <= best_purity:
                        # print(best_purity)
                        # print(IG)
                        # print(idx)
                        # print(thr)
                        best_purity = this_entropy
                        best_idx, best_thr = idx , thr

        # TODO: find the best split, loop through all the features, and consider all the
        # midpoints between adjacent training samples as possible thresholds. 
        # Computethe Gini or Entropy impurity of the split generated by that particular feature/threshold
        # pair, and return the pair with smallest impurity.

        # print(best_idx)
        # print(best_thr)
        
        return best_idx, best_thr

    def _build_tree(self, X, y, depth=0):
        
        num_samples_per_class = [np.sum(y == i) for i in range(self.n_classes_)]
        predicted_class = np.argmax(num_samples_per_class)
        node = Node(
            gini=self._gini(y,self.n_classes_),
            entropy = self._entropy(y,self.n_classes_),
            num_samples=y.size,
            num_samples_per_class=num_samples_per_class,
            predicted_class=predicted_class,
        )
 
    
        p=[]
        p_y=[]
        q=[]
        q_y=[]
        if depth < self.max_depth:
            idx, thr = self._feature_split(X, y,self.n_classes_)
            node.feature_index = idx
            node.threshold = thr
            if idx is not None:  # find the best split
                p.clear()
                p_y.clear()
                q.clear()
                q_y.clear()
                for i in range (y.size):
                    if X[i][idx] >= thr:
                        p.append(X[i])
                        p_y.append(y[i])
                    else:
                        q.append(X[i])
                        q_y.append(y[i])
                _p = np.array(p)
                _q = np.array(q)
                _p_y = np.array(p_y)
                _q_y = np.array(q_y)
                node.right = self._build_tree(_p, _p_y, depth=depth+1)
                node.left = self._build_tree(_q, _q_y, depth=depth+1)
            # TODO: Split the tree recursively according index and threshold until maximum depth is reached.

        return node

    def fit(self,X,Y):
        # Fits to the given training data
        self.n_classes_ = len(np.unique(Y)) 
        self.n_features_ = X.shape[1]
        
        # if user entered a value which was neither gini nor entropy
        if self.criterion != 'gini' :
            if self.criterion != 'entropy':
                self.criterion='gini'         
        self.tree_ = self._build_tree(X, Y)

    def predict(self,X):
        pred = [0 for i in range (len(X))]
        for i in range (len(X)):
            node = self.tree_
            idx = node.feature_index
            thr = node.threshold
            # print (thr)
            for j in range(self.max_depth): # traverse
                if idx is not None:
                    if X[i][idx] >= thr:
                        node = node.right
                        idx = node.feature_index
                        thr = node.threshold
                    else:
                        node = node.left
                        idx = node.feature_index
                        thr = node.threshold
            pred[i]=node.predicted_class
        
        # print(pred)
        #TODO: predict the label of data
        return pred

def load_train_test_data(test_ratio=.3, random_state = 1):
    balance_scale = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/balance-scale/balance-scale.data",
            names=['Class Name', 'Left-Weigh', 'Left-Distance', 'Right-Weigh','Right-Distance'],header=None)
    
    class_le = LabelEncoder()
    balance_scale['Class Name'] = class_le.fit_transform(balance_scale['Class Name'].values)
    X = balance_scale.iloc[:,1:].values
    y = balance_scale['Class Name'].values
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size = test_ratio, random_state=random_state, stratify=y)
    return X_train, X_test, y_train, y_test

def scale_features(X_train, X_test):
    sc = StandardScaler()
    sc.fit(X_train)
    X_train_std = sc.transform(X_train)
    X_test_std = sc.transform(X_test)
    return X_train_std , X_test_std

def accuracy_report(X_train_scale, y_train,X_test_scale,y_test,criterion='gini',max_depth=4):
    tree = DecisionTreeClassifier(criterion = criterion, max_depth=max_depth)
    tree.fit(X_train_scale, y_train)
    pred = tree.predict(X_train_scale)
    print(criterion + " tree train accuracy: %f" 
        % (sklearn.metrics.accuracy_score(y_train, pred )))
    pred = tree.predict(X_test_scale)
    print(criterion + " tree test accuracy: %f" 
        % (sklearn.metrics.accuracy_score(y_test, pred )))
    

def main():
    X_train, X_test, y_train, y_test = load_train_test_data(test_ratio=.3,random_state=1)
    X_train_scale, X_test_scale = scale_features(X_train, X_test)
    # gini tree
    accuracy_report(X_train, y_train,X_test,y_test,criterion='gini',max_depth=6)
    # entropy tree
    accuracy_report(X_train, y_train,X_test,y_test,criterion='entropy',max_depth=6) 

if __name__ == "__main__":
    main()
